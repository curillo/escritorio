#!/usr/bin/env node

'use strict'

const path = require('path')
const cp = require('child_process')
const fs = require('fs-extra')
const packager = require('electron-packager')

const projectRoot = path.join(__dirname, '..')
const outRoot = path.join(projectRoot, 'out')
const distInfo = require('./dist-info')

console.log(`Building for ${process.env.NODE_ENV}…`)

console.log('Removing old distribution…')
fs.removeSync(path.join(projectRoot, 'dist'))

console.log('Copying dependencies…')
copyDependencies()

console.log('Packaging emoji…')
copyEmoji()

console.log('Copying static resources…')
copyStaticResources()

if (process.platform === 'darwin' && process.env.TRAVIS_BRANCH) {
  console.log('Setting up keychain…')
  cp.execSync(path.join(__dirname, 'setup-macos-keychain'))
}

const options = {
  name: distInfo.getProductName(),
  platform: process.platform,
  arch: 'x64',
  asar: false, // TODO: Probably wanna enable this down the road.
  out: path.join(projectRoot, 'dist'),
  icon: path.join(projectRoot, 'app', 'static', 'icon'),
  dir: outRoot,
  overwrite: true,
  tmpdir: false,
  derefSymlinks: false,
  prune: false, // We'll prune them ourselves below.
  ignore: [
    '/node_modules/electron($|/)',
    '/node_modules/electron-packager($|/)',
    '/\\.git($|/)',
    '/node_modules/\\.bin($|/)'
  ],
  'app-copyright': 'Copyright © 2017 GitHub, Inc.',

  // macOS
  'app-bundle-id': distInfo.getBundleID(),
  'app-category-type': 'public.app-category.developer-tools',
  'protocols': [
    {
      name: distInfo.getBundleID(),
      schemes: [
        'x-github-client',
        'github-mac'
      ]
    }
  ],
  'osx-sign': true,

  // Windows
  win32metadata: {
    'CompanyName': distInfo.getCompanyName(),
    'FileDescription': '',
    'OriginalFilename': '',
    'ProductName': distInfo.getProductName(),
    'InternalName': distInfo.getProductName()
  }
}

console.log('Packaging…')
packager(options, (error, appPaths) => {
  if (error) {
    console.error(error)
    process.exit(1)
  } else {
    console.log(`Built to ${appPaths}`)
    process.exit(0)
  }
})

function copyEmoji () {
  const copyImages = () => {
    const source = path.join(projectRoot, 'gemoji', 'images', 'emoji')
    const destination = path.join(outRoot, 'emoji')
    fs.removeSync(destination)
    fs.copySync(source, destination)
  }

  const copyJson = () => {
    const source = path.join(projectRoot, 'gemoji', 'db', 'emoji.json')
    const destination = path.join(outRoot, 'emoji.json')
    fs.removeSync(destination)
    fs.copySync(source, destination)
  }

  copyImages()
  copyJson()
}

function copyStaticResources () {
  const dirName = process.platform
  const platformSpecific = path.join(projectRoot, 'app', 'static', dirName)
  const common = path.join(projectRoot, 'app', 'static', 'common')
  const destination = path.join(outRoot, 'static')
  fs.removeSync(destination)
  fs.copySync(platformSpecific, destination)
  fs.copySync(common, destination, { clobber: false })
}

function copyDependencies () {
  const originalPackage = require(path.join(projectRoot, 'app', 'package.json'))
  // The product name changes depending on whether it's a prod build or dev
  // build, so that we can have them running side by side.
  const updatedPackage = Object.assign({}, originalPackage, { productName: distInfo.getProductName() })

  let destination = path.join(outRoot, 'package.json')
  fs.removeSync(destination)
  fs.writeFileSync(destination, JSON.stringify(updatedPackage))

  destination = path.join(outRoot, 'node_modules')
  fs.removeSync(destination)
  fs.copySync(path.join(projectRoot, 'app', 'node_modules'), destination)

  const isProductionBuild = process.env.NODE_ENV === 'production'
  if (isProductionBuild) {
    console.log('Pruning dev dependencies…')
    cp.execSync('npm prune --production', {cwd: outRoot, env: process.env})
  }
}

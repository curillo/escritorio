#!/usr/bin/env node

'use strict'

const path = require('path')
const cp = require('child_process')
const fs = require('fs-extra')
const packager = require('electron-packager')

const projectRoot = path.join(__dirname, '..')
const buildRoot = path.join(projectRoot, 'build')
const appPackage = require(path.join(projectRoot, 'package.json'))

console.log(`Building for ${process.env.NODE_ENV}…`)

console.log('Removing old distribution…')
fs.removeSync(path.join(projectRoot, 'dist'))

console.log('Installing dependencies…')
installDependencies()

console.log('Packaging embedded Git…')
copyGitDirectory()

const options = {
  platform: process.platform,
  arch: 'x64',
  'app-version': appPackage.version,
  'build-version': appPackage.version,
  asar: false, // TODO: Probably wanna enable this down the road.
  out: path.join(projectRoot, 'dist'),
  icon: path.join(projectRoot, 'static', 'icon'),
  dir: path.join(projectRoot, 'build'),
  overwrite: true,
  tmpdir: false,
  derefSymlinks: false,
  prune: false, // We only install production dependencies above.
  ignore: [
    '/node_modules/electron-prebuilt($|/)',
    '/node_modules/electron-packager($|/)',
    '/\\.git($|/)',
    '/node_modules/\\.bin($|/)',
    '/node_modules/nodegit/vendor/libgit2/tests($|/)',
    '/node_modules/nodegit/build/Release/obj.target($|/)',
    '/node_modules/nodegit/vendor($|/)',
    '/node_modules/ohnogit/spec($|/)'
  ],

  // macOS
  'app-bundle-id': appPackage.bundleID,
  'app-category-type': 'public.app-category.developer-tools',
  'protocols': [
    {
      name: 'GitHub Auth',
      schemes: [
        'x-github-client'
      ]
    }
  ],
  'osx-sign': true,

  // Windows
  'version-string': {
    'CompanyName': appPackage.companyName,
    'FileDescription': '',
    'OriginalFilename': '',
    'ProductName': appPackage.productName,
    'InternalName': appPackage.productName
  }
}

if (process.platform === 'darwin' && process.env.TRAVIS_BRANCH) {
  cp.execSync(path.join(__dirname, 'setup-macos-keychain'))
}

packager(options, (error, appPaths) => {
  if (error) {
    console.error(error)
    process.exit(1)
  } else {
    console.log(`Built to ${appPaths}`)
    process.exit(0)
  }
})

function copyGitDirectory () {
  let source = projectRoot

  if (process.platform === 'darwin') {
    source = path.join(projectRoot, 'git', 'git-macos', 'git')
  } else if (process.platform === 'win32') {
    source = path.join(projectRoot, 'git', 'git-win32', 'git')
  } else {
    console.error(`No Git provided for platform ${process.platform} :(`)
    process.exit(1)
  }

  const destination = path.join(projectRoot, 'build', 'git')
  fs.removeSync(destination)
  fs.copySync(source, destination)
}

function installDependencies () {
  fs.copySync(path.join(projectRoot, '.npmrc'), path.join(buildRoot, '.npmrc'))

  let packageJson = appPackage
  if (process.env.NODE_ENV === 'development') {
    packageJson = debugPackageJson(packageJson)
  } else {
    packageJson = releasePackageJson(packageJson)
  }

  fs.removeSync(path.join(buildRoot, 'package.json'))
  fs.writeJsonSync(path.join(buildRoot, 'package.json'), packageJson)
  cp.execSync('npm install', {cwd: buildRoot, env: process.env})
}

function distPackageJson (appPackage) {
  const releasePackage = Object.assign({}, appPackage)
  delete releasePackage['scripts']
  delete releasePackage['devDependencies']
  return releasePackage
}

function releasePackageJson (appPackage) {
  const releasePackage = Object.assign({}, distPackageJson(appPackage))
  delete releasePackage['debugDependencies']
  return releasePackage
}

function debugPackageJson (appPackage) {
  const releasePackage = Object.assign({}, distPackageJson(appPackage))
  releasePackage.dependencies = Object.assign({}, releasePackage.dependencies, releasePackage.debugDependencies)
  delete releasePackage['debugDependencies']
  return releasePackage
}
